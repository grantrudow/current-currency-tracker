{"version":3,"sources":["images/currentLogo.png","Card.js","CurrencyForm.js","CurrencyList.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","React","Component","source","eur","gbp","cad","pln","className","CurrencyList","currentRates","map","rate","i","key","quotes","USDEUR","USDGBP","USDCAD","USDPLN","Home","src","currentLogo","alt","App","state","success","parent","this","fetch","then","response","json","data","setState","error","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,yC,yNCyB5BC,G,YCvBYC,IAAMC,UDEpB,SAAC,GAAmC,EAAjCC,OAAiC,EAAzBC,IAA0B,IAArBC,EAAoB,EAApBA,IAAKC,EAAe,EAAfA,IAAKC,EAAU,EAAVA,IACnC,MAAO,CACH,yBAAKC,UAAU,QACX,iDACA,4BAAMH,IAEV,yBAAKG,UAAU,QACX,0DACA,4BAAMH,IAEV,yBAAKG,UAAU,QACX,4DACA,4BAAMF,IAEV,yBAAKE,UAAU,QACX,yDACA,4BAAMD,OEKHE,EAtBM,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAEvB,OACC,6BAEEA,EAAaC,KAAI,SAACC,EAAMC,GACvB,OACC,kBAAC,EAAD,CACAC,IAAKD,EACLV,OAAUO,EAAaG,GAAGV,OAC1BC,IAAKM,EAAaG,GAAGE,OAAOC,OAC5BX,IAAKK,EAAaG,GAAGE,OAAOE,OAC5BX,IAAKI,EAAaG,GAAGE,OAAOG,OAC5BX,IAAKG,EAAaG,GAAGE,OAAOI,c,gBCJnBC,G,MARF,WACT,OACI,6BACI,yBAAKZ,UAAU,OAAOa,IAAKC,IAAaC,IAAI,oBCoDzCC,E,kDAnDb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACTtB,OAAQ,GACRO,aAAc,GACdgB,SAAS,GALD,E,gEAUZ,IAKMC,EAASC,KAEdC,MAAM,6HAMLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAE1BF,MAAK,SAAAG,GAAI,OAAIN,EAAOO,SAAS,CAC3BxB,aAAc,CAACuB,GACfP,SAAS,S,+BAIL,IAAD,EAEmCE,KAAKH,MAFxC,EAECf,aAFD,EAEeyB,MAFf,EAEsBT,QAE7B,OAAIE,KAAKH,MAAMC,QAEX,yBAAKlB,UAAU,kBACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,mBACb,kBAAC,EAAD,CAAcE,aAAiBkB,KAAKH,MAAMf,iBAMhD,kD,GA/CYT,IAAMC,WCKJkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAhB,GACLiB,QAAQjB,MAAMA,EAAMkB,c","file":"static/js/main.ec1f878a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/currentLogo.7b116638.png\";","import React from 'react';\nimport './Card.css';\nimport CurrencyForm from './CurrencyForm'\n\nconst Card = ({ source, eur, gbp, cad, pln }) => {\n    return [\n        <div className=\"card\">\n            <h1>US Dollar to Euro</h1>\n            <h2>{ gbp }</h2>\n        </div>,\n        <div className=\"card\">\n            <h1>US Dollar to British Pound</h1>\n            <h2>{ gbp }</h2>\n        </div>,\n        <div className=\"card\">\n            <h1>US Dollar to Canadian Dollar</h1>\n            <h2>{ cad }</h2>\n        </div>,\n        <div className=\"card\">\n            <h1>US Dollar to Polish zloty</h1>\n            <h2>{ pln }</h2>\n        </div>\n    ];\n}\n\nexport default Card;","import React from 'react';\n\nclass CurrencyForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: 'EUR'\n        }\n    }\n\n    handleChange(event) {\n        this.setState({\n            value: event.target.value\n        });\n    }\n\n    handleSubmit(event) {\n        console.log('You selected: ' + this.state.value)\n        event.preventDefault();\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <select value={this.state.value} onChange={this.handleChange}>\n                    <option value=\"EUR\">Euro</option>\n                    <option value=\"CAD\">Canadian Dollar</option>\n                    <option value=\"PLN\">Polish zloty</option>\n                    <option value=\"GBP\">Pound</option>\n                </select>\n            </form>\n        );\n    }\n}\n\nexport default CurrencyForm;","import React from 'react';\nimport Card from './Card';\n\nconst CurrencyList = ({\tcurrentRates }) => {\n\t\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\tcurrentRates.map((rate, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card\n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\tsource = {currentRates[i].source}\n\t\t\t\t\t\teur={currentRates[i].quotes.USDEUR}\n\t\t\t\t\t\tgbp={currentRates[i].quotes.USDGBP}\n\t\t\t\t\t\tcad={currentRates[i].quotes.USDCAD}\n\t\t\t\t\t\tpln={currentRates[i].quotes.USDPLN}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nexport default CurrencyList;","import React from 'react';\nimport currentLogo from './images/currentLogo.png';\nimport './Home.css';\n\nconst Home = () => {\n    return (\n        <div>\n            <img className=\"logo\" src={currentLogo} alt=\"Current logo\"></img>\n        </div>\n    )\n}\n\nexport default Home;","import React from 'react';\nimport './App.css';\nimport Card from './Card';\nimport CurrencyList from './CurrencyList';\nimport Home from './Home';\n\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n        source: '',\n        currentRates: [],\n        success: false\n      }\n  }\n\n  componentDidMount() {\n    const endpoint = 'live';\n    const access_key = '69d695f9dca70a1baae66074dfabb776';\n    const format = '1';\n    const source = 'USD';\n    const currencies = 'EUR,GBP,CAD,PLN'\n    const parent = this;\n\n     fetch('http://api.currencylayer.com/' + endpoint \n        + '?access_key=' + access_key \n        + '&currencies' + currencies\n        + '&source' + source\n        + '&format' + format\n        )\n     .then(response => response.json())\n    //  .then(data => console.log(data.quotes))\n     .then(data => parent.setState({ \n        currentRates: [data],\n        success: true,\n      }));\n  }\n\n  render() {\n    \n    const { currentRates, error, success  } = this.state;\n\n    if (this.state.success) {\n      return (\n        <div className=\"body-container\">\n          <Home />\n          <div className=\"rates-container\">\n            <CurrencyList currentRates = { this.state.currentRates } />\n          </div>\n        </div>\n      );\n    }\n    return (\n      <h1>Nothing Loaded</h1>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Home from './Home';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}